cat("Working with chromosome", chr, "\n")
genes.annot <- annot.ok[annot.ok$chr == chr, ]
genes <- genes.annot$ensemblID
ngenes <- length(genes)
chrvals <- parallel::mclapply(X = 1:(ngenes-1), mc.cores = 6,  mc.cleanup = T, FUN = function(i) {
#chrvals <- lapply(X = 1:(ngenes-1),  FUN = function(i) {
gene1 <- genes[i]
other.genes <- genes[(i+1):ngenes]
mivals <- lapply(X = other.genes,
FUN = function(gene2) {
data.frame(source = gene1, target = gene2,
distance = max(genes.annot[gene2, "start"], genes.annot[gene1, "start"]) - min(genes.annot[gene1, "start"], genes.annot[gene2, "start"]),
mi = max(MImatrix[gene1, gene2], MImatrix[gene2, gene1],  na.rm = T))
})
plyr::ldply(mivals)
})
chrdf <- plyr::ldply(chrvals)
chrdf$chr <- chr
write.table(chrdf, file =  paste("../intra/", cond, "/chr_", chr, "_distance_mi.txt", sep = ""),
row.names = F, col.names = T, sep = "\t", quote = F)
return(chrdf)
})
chrdf <- plyr::ldply(chrvals)
chrdf$chr <- chr
write.table(chrdf, file =  paste("../intra/", cond, "/chr_", chr, "_distance_mi.txt", sep = ""),
row.names = F, col.names = T, sep = "\t", quote = F)
conddf <- plyr::ldply(condvals)
conddf$cond <- cond
cat("Saving file.\n")
fwrite(conddf, file =  paste("intra/", cond,"_all_distance_mi.txt", sep = ""),
row.names = F, col.names = T, sep = "\t", nThread = 5)
fwrite(conddf, file =  paste("../intra/", cond,"_all_distance_mi.txt", sep = ""),
row.names = F, col.names = T, sep = "\t", nThread = 5)
type <- "kidney"
chrs <- c(as.character(1:22), "X")
setwd(paste0("/media/ddisk/transpipeline-data/", type, "-data/intra"))
#setwd(paste0("/labs/csbig/regulaciontrans/", type, "/intra"))
conds <- c("cancer", "healthy")
conds <- "cancer"
chr <- "22"
cond <- "cancer"
dist.mi.df <- read.delim(file=paste0(cond, "/chr_", chr, "_distance_mi.txt"), header = T)
dist.mi.df <- read.delim(file=paste0(cond, "-all-distance-mi.txt"), header = T)
dist.mi.df <- fread(file=paste0(cond, "-all-distance-mi.txt"), header = T,
nThread = 5, sep = "\t")
library(data.table)
dist.mi.df <- fread(file=paste0(cond, "-all-distance-mi.txt"), header = T,
nThread = 5, sep = "\t")
rm(dist.mi.df)
dist.mi <- fread(file=paste0(cond, "-all-distance-mi.txt"), header = T,
nThread = 5, sep = "\t")
head(dist.mi)
dist.mi.df <- dist.mi[dist.mi$chr == chr, ]
dist.mi.df <- dist.mi.df[order(dist.mi.df$distance), ]
rownames(dist.mi.df) <- NULL
dist.mi.df$bin <- ((as.numeric(rownames(dist.mi.df)) - 1)%/%binsize) + 1
dfmeans <- aggregate(cbind(distance, mi)~bin, data=dist.mi.df, FUN=mean, na.rm=TRUE)
binsize <- 100
dist.mi.df$bin <- ((as.numeric(rownames(dist.mi.df)) - 1)%/%binsize) + 1
dfmeans <- aggregate(cbind(distance, mi)~bin, data=dist.mi.df, FUN=mean, na.rm=TRUE)
dfmeans$cond <- cond
dfmeans$ch <- chr
chrs <- c(as.character(1:2), "X")
type <- "tiroides"
cat("Working with type ", type, "\n")
setwd(paste0("/media/ddisk/transpipeline-data/", type, "-data/intra"))
#setwd(paste0("/labs/csbig/regulaciontrans/", type, "/intra"))
conds <- c("cancer", "healthy")
conditiondfs <- lapply(X = conds, FUN = function(cond){
cat("Working with condition ", cond, "\n")
dist.mi <- fread(file=paste0(cond, "-all-distance-mi.txt"), header = T,
nThread = 5, sep = "\t")
meansbych <- parallel::mclapply(X = chrs, mc.cores = 7,  mc.cleanup = FALSE, FUN = function(chr){
dist.mi.df <- dist.mi[dist.mi$chr == chr, ]
dist.mi.df <- dist.mi.df[order(dist.mi.df$distance), ]
rownames(dist.mi.df) <- NULL
dist.mi.df$bin <- ((as.numeric(rownames(dist.mi.df)) - 1)%/%binsize) + 1
dfmeans <- aggregate(cbind(distance, mi)~bin, data=dist.mi.df, FUN=mean, na.rm=TRUE)
dfmeans$cond <- cond
dfmeans$ch <- chr
return(dfmeans)
})
df <- plyr::ldply(meansbych)
write.table(df, file = paste0("intra-fixed-bin-size/", cond, "-", binsize, ".txt"), sep="\t",
col.names = T, row.names = F, quote = F)
return(df)
})
library(data.table)
cond <- "cancer"
dist.mi <- fread(file=paste0(cond, "-all-distance-mi.txt"), header = T,
nThread = 5, sep = "\t")
meansbych <- parallel::mclapply(X = chrs, mc.cores = 7,  mc.cleanup = FALSE, FUN = function(chr){
dist.mi.df <- dist.mi[dist.mi$chr == chr, ]
dist.mi.df <- dist.mi.df[order(dist.mi.df$distance), ]
rownames(dist.mi.df) <- NULL
dist.mi.df$bin <- ((as.numeric(rownames(dist.mi.df)) - 1)%/%binsize) + 1
dfmeans <- aggregate(cbind(distance, mi)~bin, data=dist.mi.df, FUN=mean, na.rm=TRUE)
dfmeans$cond <- cond
dfmeans$ch <- chr
return(dfmeans)
})
meansbych <- parallel::mclapply(X = chrs, mc.cores = 7,  mc.cleanup = FALSE, FUN = function(chr){
dist.mi.df <- dist.mi[dist.mi$chr == chr, ]
dist.mi.df <- dist.mi.df[order(dist.mi.df$distance), ]
rownames(dist.mi.df) <- NULL
dist.mi.df$bin <- ((as.numeric(rownames(dist.mi.df)) - 1)%/%binsize) + 1
dfmeans <- aggregate(cbind(distance, mi)~bin, data=dist.mi.df, FUN=mean, na.rm=TRUE)
dfmeans$cond <- cond
dfmeans$ch <- chr
return(dfmeans)
})
chr <- "2"
dist.mi.df <- dist.mi[dist.mi$chr == chr, ]
dist.mi.df <- dist.mi.df[order(dist.mi.df$distance), ]
rownames(dist.mi.df) <- NULL
dist.mi.df$bin <- ((as.numeric(rownames(dist.mi.df)) - 1)%/%binsize) + 1
dfmeans <- aggregate(cbind(distance, mi)~bin, data=dist.mi.df, FUN=mean, na.rm=TRUE)
binsize <- 100
meansbych <- parallel::mclapply(X = chrs, mc.cores = 7,  mc.cleanup = FALSE, FUN = function(chr){
dist.mi.df <- dist.mi[dist.mi$chr == chr, ]
dist.mi.df <- dist.mi.df[order(dist.mi.df$distance), ]
rownames(dist.mi.df) <- NULL
dist.mi.df$bin <- ((as.numeric(rownames(dist.mi.df)) - 1)%/%binsize) + 1
dfmeans <- aggregate(cbind(distance, mi)~bin, data=dist.mi.df, FUN=mean, na.rm=TRUE)
dfmeans$cond <- cond
dfmeans$ch <- chr
return(dfmeans)
})
87+128
893+311
setwd("/media/ddisk/transpipeline-data/kidney-data/networks")
setwd("/media/ddisk/transpipeline-data/tiroides-data/networks")
library(data.table)
all_inter <- fread("tiroides-cancer.sif", sep ="\t", header = F)
cutoffval <- 0.024566920595332
head(all_inter)
colnames(all_inter) <- c("source", "MI", "target")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
cutoffval <- 0.106023025084238
all_inter <- fread("tiroides-healthy.sif", sep ="\t", header = F)
colnames(all_inter) <- c("source", "MI", "target")
colnames(all_inter) <- c("source", "MI", "target")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
cutoffval <- read.delim("networks_cut_info.txt", header = F, row.names = 1)
head(cutoffval)
cutoffval <- read.delim("networks_cut_info.txt", header = F, sep "\t")
cutoffval <- read.delim("networks_cut_info.txt", header = F, sep = "\t")
head(cutoffval)
cutoffval <- read.delim("networks_cut_info.txt", header = F, sep = "  ")
cutoffval <- read.delim("networks_cut_info.txt", header = F, sep = " ")
View(cutoffval)
library(data.table)
setwd("/media/ddisk/transpipeline-data/tiroides-data/networks")
cutoffval <- 0.242322
all_inter <- fread("tiroides-healthy.sif", sep ="\t", header = F)
colnames(all_inter) <- c("source", "MI", "target")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
cutoffval <- 0.229646
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
fwrite(inter_e8, file = "tiroides-healthy-1e8.sif", sep ="\t")
cutoffval <- 0.0529994
all_inter <- fread("tiroides-cancer.sif", sep ="\t", header = F)
cutoffval <- 0.0529994
colnames(all_inter) <- c("source", "MI", "target")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
fwrite(inter_e8, file = "1e8/tiroides-cancer-1e8.sif", sep ="\t")
setwd("/media/ddisk/transpipeline-data/colon-data/networks")
cutoffval <- 0.0370321
all_inter <- fread("colon-cancer.sif", sep ="\t", header = F)
colnames(all_inter) <- c("source", "MI", "target")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
fwrite(inter_e8, file = "1e8/colon-cancer-1e8.sif", sep ="\t")
cutoffval <- 0.242322
all_inter <- fread("colon-healthy.sif", sep ="\t", header = F)
colnames(all_inter) <- c("source", "MI", "target")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
fwrite(inter_e8, file = "1e8/colon-healthy-1e8.sif", sep ="\t")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
fwrite(inter_e8, file = "1e8/colon-healthy-1e8.sif", sep ="\t")
setwd("/media/ddisk/transpipeline-data/kidney-data/networks")
cutoffval <- 0.105668
all_inter <- fread("kidney-healthy.sif", sep ="\t", header = F)
colnames(all_inter) <- c("source", "MI", "target")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
fwrite(inter_e8, file = "1e8/kidney-healthy-1e8.sif", sep ="\t")
fwrite(inter_e8, file = "1e8/kidney-healthy-1e8.sif", sep ="\t")
cutoffval <-  0.0240111
all_inter <- fread("kidney-cancer.sif", sep ="\t", header = F)
colnames(all_inter) <- c("source", "MI", "target")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
colnames(all_inter) <- c("source", "MI", "target")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
source('~/Workspace/distance-analysis/cut_networks.R', echo=TRUE)
fwrite(inter_e8, file = "1e8/kidney-cancer-1e8.sif", sep ="\t")
install.packages("stringr")
setwd("/mnt/ddisk/transpipeline-data/")
setwd("/media/ddisk/transpipeline-data/")
library(dplyr)
annot <- read.delim("/media/ddisk/transpipeline-data/biomarts/Biomart_EnsemblG94_GRCh38_p12_karyotype.txt",
col.names = c("ensemblID", "chr", "start", "end", "band"), stringsAsFactors = F)
types <- c("kidney", "tiroides", "colon")
setwd("/media/ddisk/transpipeline-data/")
library(dplyr)
annot <- read.delim("/media/ddisk/transpipeline-data/biomarts/Biomart_EnsemblG94_GRCh38_p12_karyotype.txt",
col.names = c("ensemblID", "chr", "start", "end", "band"), stringsAsFactors = F)
annot <- annot[!duplicated(annot$ensemblID), ]
types <- c("kidney", "tiroides", "colon")
type <- types[1]
conds <- c("cancer", "healthy")
net <- lapply(conds, function(cond){
network <- read.delim(paste0(type, "-data/networks/1e8/", type, "-", cond, "-min.sif"),
stringsAsFactors = F)
network$cond <- cond
return(network)
})
net <- bind_rows(net)
head(net)
net <- bind_rows(net)
colnames(annot) <-  c("source", "source_chr", "source_start", "source_end", "source_band")
net <- merge(annot, net)
colnames(annot) <-  c("target", "target_chr", "target_start", "target_end",  "target_band")
net <- merge(annot, net)
row_number(network)
row_number(net)
nrow(net)
net <- lapply(conds, function(cond){
network <- read.delim(paste0(type, "-data/networks/1e8/", type, "-", cond, "-min.sif"),
stringsAsFactors = F)
network$cond <- cond
network$row_num <- 1:nrow(network)
return(network)
})
net <- bind_rows(net)
head(net)
head(net[net$cond == "healthy", ])
cond
type
library(data.table)
setwd("/media/ddisk/transpipeline-data/kidney-data/networks")
cutoffval <-  0.0240111
all_inter <- fread("kidney-cancer.sif", sep ="\t", header = F)
colnames(all_inter) <- c("source", "MI", "target")
colnames(all_inter) <- c("source", "MI", "target")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
fwrite(inter_e8, file = "1e8/kidney-cancer-1e8.sif", sep ="\t")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
setwd("/media/ddisk/transpipeline-data/kidney-data/networks")
cutoffval <-  0.105668
all_inter <- fread("kidney-healthy.sif", sep ="\t", header = F)
colnames(all_inter) <- c("source", "MI", "target")
inter_e8 <- all_inter[all_inter$MI > cutoffval, ]
fwrite(inter_e8, file = "1e8/kidney-healthy-1e8.sif", sep ="\t")
cond <- "healthy"
network <- read.delim(paste0(type, "-data/networks/1e8/", type, "-", cond, "-min.sif"),
stringsAsFactors = F)
ls()
setwd("/media/ddisk/transpipeline-data/")
network <- read.delim(paste0(type, "-data/networks/1e8/", type, "-", cond, "-min.sif"),
stringsAsFactors = F)
print(is.unsorted(rev(network$MI)))
print(!is.unsorted(rev(network$MI)))
print("Is not unsorted", !is.unsorted(rev(network$MI)))
print(paste0("Is not unsorted: ", !is.unsorted(rev(network$MI))))
cat("Working with type", type, "\n")
net <- lapply(conds, function(cond){
cat("Readomg network ", cond, "\n")
network <- read.delim(paste0(type, "-data/networks/1e8/", type, "-", cond, "-min.sif"),
stringsAsFactors = F)
cat("Is not unsorted: ", !is.unsorted(rev(network$MI))))
network <- network %>% arrange(desc(MI))
network$cond <- cond
network$row_num <- 1:nrow(network)
return(network)
})
net <- lapply(conds, function(cond){
cat("Readomg network ", cond, "\n")
network <- read.delim(paste0(type, "-data/networks/1e8/", type, "-", cond, "-min.sif"),
stringsAsFactors = F)
cat("Is not unsorted: ", !is.unsorted(rev(network$MI)))
network <- network %>% arrange(desc(MI))
network$cond <- cond
network$row_num <- 1:nrow(network)
return(network)
})
net <- lapply(conds, function(cond){
cat("Readingg network ", cond, "\n")
network <- read.delim(paste0(type, "-data/networks/1e8/", type, "-", cond, "-min.sif"),
stringsAsFactors = F)
cat("Is not unsorted: ", !is.unsorted(rev(network$MI)), "\n")
network <- network %>% arrange(desc(MI))
network$cond <- cond
network$row_num <- 1:nrow(network)
return(network)
})
net <- bind_rows(net)
head(net)
head(net[net$cond == "healthy", ])
net <- bind_rows(net)
colnames(annot) <-  c("source", "source_chr", "source_start", "source_end", "source_band")
net <- merge(annot, net)
colnames(annot) <-  c("target", "target_chr", "target_start", "target_end",  "target_band")
net <- merge(annot, net)
net$inter <- ifelse(net$source_chr == net$target_chr, F, T)
net$tnteraction_type <- ifelse(net$inter, "Trans", "Inter-Cytoband")
head(net)
net[1]
net[1, ]
net[1, "target_chr"]
net[1, "target_chr"] == net[1, "source_chr"]
annot.symbol <- read.delim("/mnt/ddisk/transpipeline-data/biomarts/Biomart_EnsemblG94_GRCh38_p12.txt",
colClasses = c("character",  "NULL",  "NULL",  "NULL", "NULL", "NULL",  "character" ),
stringsAsFactors = F,
col.names = c("EnsemblID",  "NULL",  "NULL",  "NULL", "NULL", "NULL",  "Symbol"))
annot.symbol <- read.delim("/media/ddisk/transpipeline-data/biomarts/Biomart_EnsemblG94_GRCh38_p12.txt",
colClasses = c("character",  "NULL",  "NULL",  "NULL", "NULL", "NULL",  "character" ),
stringsAsFactors = F,
col.names = c("EnsemblID",  "NULL",  "NULL",  "NULL", "NULL", "NULL",  "Symbol"))
head(annot.symbol)
annot.symbol <- annot.symbol[!duplicated(annot.symbol$EnsemblID), ]
targets <- net %>% select(target, target_chr, target_start, target_end, target_band)
sources <- net %>% select(source, source_hr, source_start, source_end, source_band)
sources <- net %>% select(source, source_chr, source_start, source_end, source_band)
colnames(targets) <- c("ensemblID", "chr", "start", "end", "band")
colnames(sources)  <- c("ensemblID", "chr", "start", "end", "band")
vertices <- rbind(targets, sources)
vertices <- vertices[!duplicated(vertices$EnsemblID), ]
annot.symbol <- read.delim("/media/ddisk/transpipeline-data/biomarts/Biomart_EnsemblG94_GRCh38_p12.txt",
colClasses = c("character",  "NULL",  "NULL",  "NULL", "NULL", "NULL",  "character" ),
stringsAsFactors = F,
col.names = c("ensemblID",  "NULL",  "NULL",  "NULL", "NULL", "NULL",  "Symbol"))
vertices <- vertices %>% inner_join(annot.symbol, by = "ensemblID")
housekeeping <- read.delim("/media/ddisk/transpipeline-data/annotations/housekeeping.txt", header = F,
colClasses = c("character", "NULL"))
housekeeping <- housekeeping[, 1, drop= T]
housekeeping <- stringr::str_trim(housekeeping)
housekeeping <- tolower(housekeeping)
vertices$isHK <- ifelse(tolower(vertices$Symbol) %in% housekeeping, T, F)
vertices %>% filter(isHK == T)
vertices <- rbind(targets, sources)
vertices <- vertices[!duplicated(vertices$ensemblID), ]
vertices <- vertices %>% inner_join(annot.symbol, by = "ensemblID")
vertices <- vertices[!duplicated(vertices$ensemblID), ]
vertices <- vertices %>% inner_join(annot.symbol, by = "ensemblID")
View(vertices)
vertices[duplicated(vertices$ensemblID)]
vertices[duplicated(vertices$ensemblID), ]
annot.symbol <- read.delim("/media/ddisk/transpipeline-data/biomarts/Biomart_EnsemblG94_GRCh38_p12.txt",
colClasses = c("character",  "NULL",  "NULL",  "NULL", "NULL", "NULL",  "character" ),
stringsAsFactors = F,
col.names = c("ensemblID",  "NULL",  "NULL",  "NULL", "NULL", "NULL",  "symbol"))
annot.symbol <- annot.symbol[!duplicated(annot.symbol$ensemblID), ]
targets <- net %>% select(target, target_chr, target_start, target_end, target_band)
sources <- net %>% select(source, source_chr, source_start, source_end, source_band)
colnames(targets) <- c("ensemblID", "chr", "start", "end", "band")
colnames(sources)  <- c("ensemblID", "chr", "start", "end", "band")
vertices <- rbind(targets, sources)
vertices <- vertices[!duplicated(vertices$ensemblID), ]
vertices <- vertices %>% inner_join(annot.symbol, by = "ensemblID")
housekeeping <- read.delim("/media/ddisk/transpipeline-data/annotations/housekeeping.txt", header = F,
colClasses = c("character", "NULL"))
housekeeping <- housekeeping[, 1, drop= T]
housekeeping <- stringr::str_trim(housekeeping)
housekeeping <- tolower(housekeeping)
vertices$isHK <- ifelse(tolower(vertices$Symbol) %in% housekeeping, T, F)
vertices$isHK <- ifelse(tolower(vertices$symbol) %in% housekeeping, T, F)
vertices %>% filter(isHK == T)
tfs <- read.delim("/media/ddisk/transpipeline-data/annotations/tfs_2018.txt", header = F,
col.names = c("ensemblID"))
vertices$isTF <- ifelse(vertices$ensemblID %in% tfs$ensemblID, T, F)
kariotype <- read.delim("/media/ddisk/transpipeline-data/annotations/chromosome.band.hg38.txt",
header = T, stringsAsFactors = F)
names(kariotype)[1] <- "chr"
tbands <- kariotype %>% mutate(arm = unlist(lapply(as.vector(strsplit(name, split = "")), "[[", 1)))
tbands <- tbands %>% group_by(chr, arm) %>% summarise(t = max(name))
tbands <- tbands %>% group_by(chr) %>% summarise(t1 = min(t), t2 = max(t))
tbands$chr <- stringr::str_replace(tbands$chr, "chr", "")
vertices <- vertices %>% inner_join(tbands, by = "Chr")
vertices <- vertices %>% inner_join(tbands, by = "chr")
vertices$isExtreme <- vertices$band == vertices$t1 | vertices$band == vertices$t2
vertices$isExtreme <- as.integer(vertices$isExtreme)
vertices$isHK <- as.integer(vertices$isHK)
vertices$isTF <- as.integer(vertices$isTF)
setwd("/media/ddisk/transpipeline-data/")
library(dplyr)
annot <- read.delim("/media/ddisk/transpipeline-data/biomarts/Biomart_EnsemblG94_GRCh38_p12_karyotype.txt",
col.names = c("ensemblID", "chr", "start", "end", "band"), stringsAsFactors = F)
annot <- annot[!duplicated(annot$ensemblID), ]
types <- c("kidney", "tiroides", "colon")
type <- types[1]
cat("Working with type", type, "\n")
conds <- c("cancer", "healthy")
cond <- cond[1]
cond <- conds[1]
net <- lapply(conds, function(cond){
cat("Reading network ", cond, "\n")
network <- read.delim(paste0(type, "-data/networks/1e8/", type, "-", cond, "-min.sif"),
stringsAsFactors = F)
cat("Is not unsorted: ", !is.unsorted(rev(network$MI)), "\n")
network <- network %>% arrange(desc(MI))
network$cond <- cond
network$row_num <- 1:nrow(network)
return(network)
})
net <- bind_rows(net)
colnames(annot) <-  c("source", "source_chr", "source_start", "source_end", "source_band")
net <- merge(annot, net)
colnames(annot) <-  c("target", "target_chr", "target_start", "target_end",  "target_band")
net <- merge(annot, net)
net$inter <- ifelse(net$source_chr == net$target_chr, F, T)
net$interaction_type <- ifelse(net$inter, "Trans", "Inter-Cytoband")
net$interaction_type <- ifelse(net$source_band == net$target_band & !net$inter, "Intra-Cytoband",
net$interaction_type)
head(net)
annot.symbol <- read.delim("/media/ddisk/transpipeline-data/biomarts/Biomart_EnsemblG94_GRCh38_p12.txt",
colClasses = c("character",  "NULL",  "NULL",  "NULL", "NULL", "NULL",  "character" ),
stringsAsFactors = F,
col.names = c("ensemblID",  "NULL",  "NULL",  "NULL", "NULL", "NULL",  "symbol"))
annot.symbol <- annot.symbol[!duplicated(annot.symbol$ensemblID), ]
targets <- net %>% select(target, target_chr, target_start, target_end, target_band)
sources <- net %>% select(source, source_chr, source_start, source_end, source_band)
colnames(targets) <- c("ensemblID", "chr", "start", "end", "band")
colnames(sources)  <- c("ensemblID", "chr", "start", "end", "band")
vertices <- rbind(targets, sources)
vertices <- vertices[!duplicated(vertices$ensemblID), ]
vertices <- vertices %>% inner_join(annot.symbol, by = "ensemblID")
housekeeping <- read.delim("/media/ddisk/transpipeline-data/annotations/housekeeping.txt", header = F,
colClasses = c("character", "NULL"))
housekeeping <- housekeeping[, 1, drop= T]
housekeeping <- stringr::str_trim(housekeeping)
housekeeping <- tolower(housekeeping)
vertices$isHK <- ifelse(tolower(vertices$symbol) %in% housekeeping, T, F)
vertices %>% filter(isHK == T)
tfs <- read.delim("/media/ddisk/transpipeline-data/annotations/tfs_2018.txt", header = F,
col.names = c("ensemblID"))
vertices$isTF <- ifelse(vertices$ensemblID %in% tfs$ensemblID, T, F)
head(vertices)
kariotype <- read.delim("/media/ddisk/transpipeline-data/annotations/chromosome.band.hg38.txt",
header = T, stringsAsFactors = F)
names(kariotype)[1] <- "chr"
tbands <- kariotype %>% mutate(arm = unlist(lapply(as.vector(strsplit(name, split = "")), "[[", 1)))
tbands <- tbands %>% group_by(chr, arm) %>% summarise(t = max(name))
tbands <- tbands %>% group_by(chr) %>% summarise(t1 = min(t), t2 = max(t))
tbands$chr <- stringr::str_replace(tbands$chr, "chr", "")
vertices <- vertices %>% inner_join(tbands, by = "chr")
vertices$isExtreme <- vertices$band == vertices$t1 | vertices$band == vertices$t2
vertices$isExtreme <- as.integer(vertices$isExtreme)
vertices$isHK <- as.integer(vertices$isHK)
vertices$isTF <- as.integer(vertices$isTF)
for(i in 1:length(cond)){
net.cond <- net%>% filter(cond == conds[i]) %>% select(source, target, MI, interaction_type) %>%
arrange(desc(MI))
net.cond$RowNumber <- 1:nrow(net.cond)
vertices.cond <- vertices %>%
filter(vertices$EnsemblID %in% net.cond$Source | vertices$EnsemblID %in% net.cond$Target)
deg.cond <- read.delim(paste0("deg/ebayes-", names(conds)[i], ".tsv"),  header = T, stringsAsFactors = F,
colClasses = c("character", "NULL", "numeric", "numeric", "NULL", "NULL"),
col.names = c( "EnsemblID", "NULL",  "LFC", "P-val","NULL", "NULL"))
vertices.cond <- vertices.cond %>% inner_join(deg.cond, by = "EnsemblID")
vertices.cond <- vertices.cond %>% select(-t1, -t2)
write.table(vertices.cond, file = paste0("networks/network-tables/", conds[i], "-vertices.tsv") ,
quote = F, row.names = F, col.names = T, sep = "\t")
write.table(net.cond, file = paste0("networks/network-tables/", conds[i], "-norm-mi-interactions.tsv"),
quote = F, row.names = F, col.names = T, sep = "\t")
}
for(i in 1:length(cond)){
net.cond <- net%>% filter(cond == conds[i]) %>% select(source, target, MI, interaction_type) %>%
arrange(desc(MI))
vertices.cond <- vertices %>%
filter(vertices$ensemblID %in% net.cond$source | vertices$ensemblID %in% net.cond$target)
write.table(vertices.cond, file = paste0("networks/network-tables/", conds[i], "-vertices.tsv") ,
quote = F, row.names = F, col.names = T, sep = "\t")
write.table(net.cond, file = paste0("networks/network-tables/", conds[i], "-interactions.tsv"),
quote = F, row.names = F, col.names = T, sep = "\t")
}
for(i in 1:length(cond)){
net.cond <- net%>% filter(cond == conds[i]) %>% select(source, target, MI, interaction_type) %>%
arrange(desc(MI))
vertices.cond <- vertices %>%
filter(vertices$ensemblID %in% net.cond$source | vertices$ensemblID %in% net.cond$target)
write.table(vertices.cond, file = paste0("networks/network-tables/", conds[i], "-vertices.tsv") ,
quote = F, row.names = F, col.names = T, sep = "\t")
write.table(net.cond, file = paste0("networks/network-tables/", conds[i], "-interactions.tsv"),
quote = F, row.names = F, col.names = T, sep = "\t")
}
write.table(vertices.cond, file = paste0(type, "-data/networks/network-tables/", conds[i], "-vertices.tsv") ,
quote = F, row.names = F, col.names = T, sep = "\t")
write.table(net.cond, file = paste0(type, "-data/networks/network-tables/", conds[i], "-interactions.tsv"),
quote = F, row.names = F, col.names = T, sep = "\t")
for(i in 1:length(cond)){
net.cond <- net%>% filter(cond == conds[i]) %>% select(source, target, MI, interaction_type) %>%
arrange(desc(MI))
vertices.cond <- vertices %>%
filter(vertices$ensemblID %in% net.cond$source | vertices$ensemblID %in% net.cond$target)
write.table(vertices.cond, file = paste0(type, "-data/networks/network-tables/", conds[i], "-vertices.tsv") ,
quote = F, row.names = F, col.names = T, sep = "\t")
write.table(net.cond, file = paste0(type, "-data/networks/network-tables/", conds[i], "-interactions.tsv"),
quote = F, row.names = F, col.names = T, sep = "\t")
}
for(i in 1:length(conds)){
net.cond <- net%>% filter(cond == conds[i]) %>% select(source, target, MI, interaction_type) %>%
arrange(desc(MI))
vertices.cond <- vertices %>%
filter(vertices$ensemblID %in% net.cond$source | vertices$ensemblID %in% net.cond$target)
write.table(vertices.cond, file = paste0(type, "-data/networks/network-tables/",
type,"-", conds[i], "-vertices.tsv") ,
quote = F, row.names = F, col.names = T, sep = "\t")
write.table(net.cond, file = paste0(type, "-data/networks/network-tables/",
type ,"-", conds[i], "-interactions.tsv"),
quote = F, row.names = F, col.names = T, sep = "\t")
}
